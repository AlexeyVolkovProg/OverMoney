name: Build & Push & Deploy to k8s cluster

on:
  push:
    branches:
      - release


jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      recognizer: ${{ steps.filter.outputs.recognizer }}
      orchestrator: ${{ steps.filter.outputs.orchestrator }}
      telegram-bot: ${{ steps.filter.outputs.telegram-bot }}
      invest: ${{ steps.filter.outputs.invest }}
      wit-ai-go-proxy: ${{ steps.filter.outputs.wit-ai-go-proxy }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            recognizer:
              - 'recognizer_service/**'
            orchestrator:
              - 'orchestrator_service/**'
            telegram-bot:
              - 'telegram_bot_service/**'
            invest:
              - 'invest_service/**'
            wit-ai-go-proxy:
              - 'wit_ai_go_proxy/**'
  build-and-push-images:
    name: Build & Push images to DockerHub
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.7.0


      - name: Orchestrator Build and Push to Dockerhub
        if: ${{ needs.detect-changes.outputs.orchestrator == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /orchestrator_service/Dockerfile
          push: true
          tags: nekromant322/overmoney-orchestrator

      - name: Recognizer Build and Push to Dockerhub
        if: ${{ needs.detect-changes.outputs.recognizer == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /recognizer_service/Dockerfile
          push: true
          tags: nekromant322/overmoney-recognizer

      - name: Telegram Bot Build and Push to Dockerhub
        if: ${{ needs.detect-changes.outputs.telegram-bot == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /telegram_bot_service/Dockerfile
          push: true
          tags: nekromant322/overmoney-telegram-bot

      - name: Invest Build and Push to Dockerhub
        if: ${{ needs.detect-changes.outputs.invest == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /invest_service/Dockerfile
          push: true
          tags: nekromant322/overmoney-invest

      - name: Wit ai go proxy Build and Push to Dockerhub
        if: ${{ needs.detect-changes.outputs.wit-ai-go-proxy == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /wit_ai_go_proxy/Dockerfile
          push: true
          tags: nekromant322/overmoney-wit-ai-go-proxy

  k8s-manifest-update:
    name: Update manifests on remote host
    runs-on: ubuntu-latest
#    todo раскоментить после отладки
#    needs: [build-and-push-images]
    steps:
      - uses: actions/checkout@v4
      - name: Inject secrets in resource manifests
        uses: none0nfg/yaml-secrets-injector@v0.0.1
        with:
          inject_files: |-
            resource-manifest/sa-recognizer-deployment.yaml
            resource-manifest/service-sa-recognizer-lb.yaml
            resource-manifest/sa-orchestrator-deployment.yaml
            resource-manifest/service-sa-orchestrator-lb.yaml
            resource-manifest/sa-telegram-bot-deployment.yaml
            resource-manifest/service-sa-telegram-bot-lb.yaml
            resource-manifest/wit-ai-go-proxy-deployment.yaml
          secrets: ${{ toJSON(secrets) }} # It would contain all your repository secrets in json
      - name: copy files via ssh private key
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 195.133.49.108
          username: github
          key: ${{ secrets.SSH_PRIVATE_KEY_GITHUB_USER }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE_GITHUB_USER }}
          port: 22
          source: "resource-manifest/*"
          target: "/home/github"
          overwrite: true

#  :
#    name: Copy k8s manifests by ssh
#    runs-on: ubuntu-latest
##    needs: [build-and-push-images, inject-secrets]
#    needs: [inject-secrets]
#    steps:
#      - uses: actions/checkout@v4
#
#  k8s-rollout-restart:
#todo kubectl rollout restart deployment "depName"
#deploy:
#  name: Deploy
#  runs-on: ubuntu-latest
#  needs: [ build_and_push_images, detect-changes, push_compose ]
#  steps:
#    - name: Connect with SSH and Deploy
#      uses: appleboy/ssh-action@v0.1.8
#      with:
#        host: overridetech.ru
#        username: ${{ secrets.SSH_USER }}
#        password: ${{ secrets.SSH_PASSWORD }}
#        script: |
#          echo ORCHESTRATOR_DB_USER = ${{ secrets.ORCHESTRATOR_DB_USER }} > overmoney-env.txt
#          echo ORCHESTRATOR_DB_PASSWORD = ${{ secrets.ORCHESTRATOR_DB_PASSWORD }} >> overmoney-env.txt
#          echo ORCHESTRATOR_DB_PORT = 5432 >> overmoney-env.txt
#          echo ORCHESTRATOR_DB_HOST = orchestrator-db >> overmoney-env.txt
#          echo TELEGRAM_BOT_DB_USER = ${{ secrets.TELEGRAM_BOT_DB_USER }} >> overmoney-env.txt
#          echo TELEGRAM_BOT_DB_PASSWORD = ${{ secrets.TELEGRAM_BOT_DB_PASSWORD }} >> overmoney-env.txt
#          echo TELEGRAM_BOT_DB_PORT = 5432 >> overmoney-env.txt
#          echo TELEGRAM_BOT_DB_HOST = telegram-bot-db >> overmoney-env.txt
#          echo TELEGRAM_BOT_TOKEN = ${{ secrets.TELEGRAM_BOT_TOKEN }} >> overmoney-env.txt
#          echo TELEGRAM_BOT_NAME = OverMoneyBot >> overmoney-env.txt
#          echo JWT_ACCESS_KEY = ${{ secrets.JWT_ACCESS_KEY }} >> overmoney-env.txt
#          echo JWT_REFRESH_KEY = ${{ secrets.JWT_REFRESH_KEY }} >> overmoney-env.txt
#          echo WIT_AI_TOKEN = ${{ secrets.WIT_AI_TOKEN }} >> overmoney-env.txt
#          echo SPRING_APPLICATION_PROFILE = test >> overmoney-env.txt
#          echo ORCHESTRATOR_HOST = ${{ secrets.ORCHESTRATOR_HOST }} >> overmoney-env.txt
#          echo INTERNAL_KEY_HEADER = ${{ secrets.INTERNAL_KEY_HEADER }} >> overmoney-env.txt
#
#          if ${{ needs.detect-changes.outputs.eureka}}; then
#            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker stop eureka






#todo доделать инжекты и копирование манифестов, перенести вероятно в другой шаг
#todo попробовать профиль прод и подсунуть креды
#kubectl rollout restart deployment "depName"
#kubectl rollout restart deployment sa-recognizer
