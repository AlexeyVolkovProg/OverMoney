apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log", "services"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
  namespace: monitoring
subjects:
  - kind: ServiceAccount
    name: prometheus-sa
    namespace: monitoring
roleRef:
  kind: ClusterRole
  name: prometheus-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sa-prometheus
  namespace: monitoring
  labels:
    app: sa-prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sa-prometheus
  template:
    metadata:
      labels:
        app: sa-prometheus
    spec:
      serviceAccountName: prometheus-sa
      containers:
        - name: sa-prometheus
          image: prom/prometheus:v2.33.5
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: [ 'localhost:9090' ]
            
      - job_name: 'recognizer_overmoney_monitoring'
        scrape_interval: 5s
        metrics_path: '/actuator/prometheus'
        kubernetes_sd_configs:
          - role: pod
            namespaces:                      
              names:                        
                - default                                  
        relabel_configs:
          - source_labels: [ __meta_kubernetes_pod_label_app ]
            action: keep
            regex: sa-recognizer
          - source_labels: [ __meta_kubernetes_pod_name ]
            action: replace
            target_label: instance
            replacement: $1
            regex: (.+)
            
      - job_name: 'orchestrator_overmoney_monitoring'
        scrape_interval: 5s
        metrics_path: '/actuator/prometheus'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - default
        relabel_configs:
          - source_labels: [ __meta_kubernetes_pod_label_app ]
            action: keep
            regex: sa-orchestrator
          - source_labels: [ __meta_kubernetes_pod_name ]
            action: replace
            target_label: instance
            replacement: $1
            regex: (.+)
            
      - job_name: 'telegram_bot_overmoney_monitoring'
        scrape_interval: 5s
        metrics_path: '/actuator/prometheus'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - default
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: sa-telegram-bot
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: instance
            replacement: $1
            regex: (.+)
      - job_name: 'orchestrator_db_monitoring'
        scrape_interval: 15s
        static_configs:
          - targets: ['postgres-exporter-orchestrator-svc:9187']
            labels:
              group: 'orchestrator-db'
      - job_name: 'telegram_db_monitoring'
        scrape_interval: 15s
        static_configs:
          - targets: ['postgres-exporter-telegram-svc:9187']
            labels:
              group: 'telegram-bot-db'
---
apiVersion: v1
kind: Service
metadata:
  name: sa-prometheus-svc
  namespace: monitoring
spec:
  ports:
    - port: 9090
      targetPort: 9090
      protocol: TCP
  selector:
    app: sa-prometheus